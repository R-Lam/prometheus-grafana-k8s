---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-prometheus
  labels:
    app: prometheus-deployment
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.39.1
        args:
          - '--storage.tsdb.retention=6h'
          - '--storage.tsdb.path=/prometheus'
          - '--config.file=/etc/prometheus/prometheus.yml'
        ports:
        - name: web
          containerPort: 9090
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus
        - name: prometheus-storage-volume
          mountPath: /prometheus
      restartPolicy: Always
      volumes:
      - name: prometheus-config-volume
        configMap:
            defaultMode: 420
            name: prometheus-config
      - name: prometheus-storage-volume
        persistentVolumeClaim:
            claimName: pvc-prometheus
---
apiVersion: v1
kind: Service
metadata:
    name: prometheus-service
spec:
    selector:
        app: prometheus
    type: ClusterIP
    ports:
    - port: 9090
      targetPort: 9090
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus-apps-ingress
spec:
  rules:
  - host: prometheus-apps.$CLUSTER_WILDCARD
    http:
      paths:
      - backend:
          service:
            name: prometheus-service
            port:
              number: 9090
        path: /
        pathType: Prefix
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      # How frequently to scrape targets by default.
      [ scrape_interval: <duration> | default = 1m ]

      # How long until a scrape request times out.
      [ scrape_timeout: <duration> | default = 10s ]

      # How frequently to evaluate rules.
      [ evaluation_interval: <duration> | default = 1m ]

      # The labels to add to any time series or alerts when communicating with
      # external systems (federation, remote storage, Alertmanager).
      external_labels:
        [ <labelname>: <labelvalue> ... ]

      # File to which PromQL queries are logged.
      # Reloading the configuration will reopen the file.
      [ query_log_file: <string> ]

    # Rule files specifies a list of globs. Rules and alerts are read from
    # all matching files.
    rule_files:
      [ - <filepath_glob> ... ]

    # A list of scrape configurations.
    scrape_configs:
      [ - <scrape_config> ... ]

    # Alerting specifies settings related to the Alertmanager.
    alerting:
      alert_relabel_configs:
        [ - <relabel_config> ... ]
      alertmanagers:
        [ - <alertmanager_config> ... ]

    # Settings related to the remote write feature.
    remote_write:
      [ - <remote_write> ... ]

    # Settings related to the remote read feature.
    remote_read:
      [ - <remote_read> ... ]

    # Storage related settings that are runtime reloadable.
    storage:
      [ tsdb: <tsdb> ]
      [ exemplars: <exemplars> ]

    # Configures exporting traces.
    tracing:
      [ <tracing_config> ]